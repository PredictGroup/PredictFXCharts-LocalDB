#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PredictFXCharts
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="consoledb2")]
	public partial class consoledb2DataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertorders(orders instance);
    partial void Updateorders(orders instance);
    partial void Deleteorders(orders instance);
    partial void Insertpositions(positions instance);
    partial void Updatepositions(positions instance);
    partial void Deletepositions(positions instance);
    partial void Insertsettingquotes(settingquotes instance);
    partial void Updatesettingquotes(settingquotes instance);
    partial void Deletesettingquotes(settingquotes instance);
    partial void Insertstocks(stocks instance);
    partial void Updatestocks(stocks instance);
    partial void Deletestocks(stocks instance);
    partial void Inserttimeframes(timeframes instance);
    partial void Updatetimeframes(timeframes instance);
    partial void Deletetimeframes(timeframes instance);
    partial void Inserttradetypes(tradetypes instance);
    partial void Updatetradetypes(tradetypes instance);
    partial void Deletetradetypes(tradetypes instance);
    partial void Insertvalueatrisk(valueatrisk instance);
    partial void Updatevalueatrisk(valueatrisk instance);
    partial void Deletevalueatrisk(valueatrisk instance);
    partial void Inserttickquotes(tickquotes instance);
    partial void Updatetickquotes(tickquotes instance);
    partial void Deletetickquotes(tickquotes instance);
    partial void Insertvolquotes(volquotes instance);
    partial void Updatevolquotes(volquotes instance);
    partial void Deletevolquotes(volquotes instance);
    #endregion
		
		public consoledb2DataDataContext() : 
				base(global::PredictFXCharts.Properties.Settings.Default.consoledb2DataContextConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public consoledb2DataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public consoledb2DataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public consoledb2DataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public consoledb2DataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<orders> orders
		{
			get
			{
				return this.GetTable<orders>();
			}
		}
		
		public System.Data.Linq.Table<positions> positions
		{
			get
			{
				return this.GetTable<positions>();
			}
		}
		
		public System.Data.Linq.Table<settingquotes> settingquotes
		{
			get
			{
				return this.GetTable<settingquotes>();
			}
		}
		
		public System.Data.Linq.Table<stocks> stocks
		{
			get
			{
				return this.GetTable<stocks>();
			}
		}
		
		public System.Data.Linq.Table<timeframes> timeframes
		{
			get
			{
				return this.GetTable<timeframes>();
			}
		}
		
		public System.Data.Linq.Table<tradetypes> tradetypes
		{
			get
			{
				return this.GetTable<tradetypes>();
			}
		}
		
		public System.Data.Linq.Table<valueatrisk> valueatrisk
		{
			get
			{
				return this.GetTable<valueatrisk>();
			}
		}
		
		public System.Data.Linq.Table<tickquotes> tickquotes
		{
			get
			{
				return this.GetTable<tickquotes>();
			}
		}
		
		public System.Data.Linq.Table<volquotes> volquotes
		{
			get
			{
				return this.GetTable<volquotes>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.orders")]
	public partial class orders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _stock;
		
		private long _tradetypeid;
		
		private System.Nullable<double> _price;
		
		private System.Nullable<System.DateTime> _orderdatetime;
		
		private System.Nullable<System.DateTime> _executeddatetime;
		
		private System.Nullable<long> _OrderNum;
		
		private System.Nullable<long> _TradeNum;
		
		private System.Nullable<bool> _active;
		
		private System.Nullable<long> _qty;
		
		private EntityRef<stocks> _stocks;
		
		private EntityRef<tradetypes> _tradetypes;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnstockChanging(long value);
    partial void OnstockChanged();
    partial void OntradetypeidChanging(long value);
    partial void OntradetypeidChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    partial void OnorderdatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnorderdatetimeChanged();
    partial void OnexecuteddatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnexecuteddatetimeChanged();
    partial void OnOrderNumChanging(System.Nullable<long> value);
    partial void OnOrderNumChanged();
    partial void OnTradeNumChanging(System.Nullable<long> value);
    partial void OnTradeNumChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    partial void OnqtyChanging(System.Nullable<long> value);
    partial void OnqtyChanged();
    #endregion
		
		public orders()
		{
			this._stocks = default(EntityRef<stocks>);
			this._tradetypes = default(EntityRef<tradetypes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stock", DbType="BigInt NOT NULL")]
		public long stock
		{
			get
			{
				return this._stock;
			}
			set
			{
				if ((this._stock != value))
				{
					if (this._stocks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstockChanging(value);
					this.SendPropertyChanging();
					this._stock = value;
					this.SendPropertyChanged("stock");
					this.OnstockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tradetypeid", DbType="BigInt NOT NULL")]
		public long tradetypeid
		{
			get
			{
				return this._tradetypeid;
			}
			set
			{
				if ((this._tradetypeid != value))
				{
					if (this._tradetypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntradetypeidChanging(value);
					this.SendPropertyChanging();
					this._tradetypeid = value;
					this.SendPropertyChanged("tradetypeid");
					this.OntradetypeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderdatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> orderdatetime
		{
			get
			{
				return this._orderdatetime;
			}
			set
			{
				if ((this._orderdatetime != value))
				{
					this.OnorderdatetimeChanging(value);
					this.SendPropertyChanging();
					this._orderdatetime = value;
					this.SendPropertyChanged("orderdatetime");
					this.OnorderdatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_executeddatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> executeddatetime
		{
			get
			{
				return this._executeddatetime;
			}
			set
			{
				if ((this._executeddatetime != value))
				{
					this.OnexecuteddatetimeChanging(value);
					this.SendPropertyChanging();
					this._executeddatetime = value;
					this.SendPropertyChanged("executeddatetime");
					this.OnexecuteddatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNum", DbType="BigInt")]
		public System.Nullable<long> OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this.OnOrderNumChanging(value);
					this.SendPropertyChanging();
					this._OrderNum = value;
					this.SendPropertyChanged("OrderNum");
					this.OnOrderNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeNum", DbType="BigInt")]
		public System.Nullable<long> TradeNum
		{
			get
			{
				return this._TradeNum;
			}
			set
			{
				if ((this._TradeNum != value))
				{
					this.OnTradeNumChanging(value);
					this.SendPropertyChanging();
					this._TradeNum = value;
					this.SendPropertyChanged("TradeNum");
					this.OnTradeNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qty", DbType="BigInt")]
		public System.Nullable<long> qty
		{
			get
			{
				return this._qty;
			}
			set
			{
				if ((this._qty != value))
				{
					this.OnqtyChanging(value);
					this.SendPropertyChanging();
					this._qty = value;
					this.SendPropertyChanged("qty");
					this.OnqtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stocks_orders", Storage="_stocks", ThisKey="stock", OtherKey="id", IsForeignKey=true)]
		public stocks stocks
		{
			get
			{
				return this._stocks.Entity;
			}
			set
			{
				stocks previousValue = this._stocks.Entity;
				if (((previousValue != value) 
							|| (this._stocks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._stocks.Entity = null;
						previousValue.orders.Remove(this);
					}
					this._stocks.Entity = value;
					if ((value != null))
					{
						value.orders.Add(this);
						this._stock = value.id;
					}
					else
					{
						this._stock = default(long);
					}
					this.SendPropertyChanged("stocks");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tradetypes_orders", Storage="_tradetypes", ThisKey="tradetypeid", OtherKey="id", IsForeignKey=true)]
		public tradetypes tradetypes
		{
			get
			{
				return this._tradetypes.Entity;
			}
			set
			{
				tradetypes previousValue = this._tradetypes.Entity;
				if (((previousValue != value) 
							|| (this._tradetypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tradetypes.Entity = null;
						previousValue.orders.Remove(this);
					}
					this._tradetypes.Entity = value;
					if ((value != null))
					{
						value.orders.Add(this);
						this._tradetypeid = value.id;
					}
					else
					{
						this._tradetypeid = default(long);
					}
					this.SendPropertyChanged("tradetypes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.positions")]
	public partial class positions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _stock;
		
		private System.Nullable<double> _priceopen;
		
		private System.Nullable<long> _qty;
		
		private System.Nullable<System.DateTime> _opened;
		
		private System.Nullable<System.DateTime> _closed;
		
		private System.Nullable<bool> _active;
		
		private System.Nullable<double> _priceclose;
		
		private System.Nullable<long> _tradetypeid;
		
		private System.Nullable<long> _openqty;
		
		private EntityRef<stocks> _stocks;
		
		private EntityRef<tradetypes> _tradetypes;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnstockChanging(long value);
    partial void OnstockChanged();
    partial void OnpriceopenChanging(System.Nullable<double> value);
    partial void OnpriceopenChanged();
    partial void OnqtyChanging(System.Nullable<long> value);
    partial void OnqtyChanged();
    partial void OnopenedChanging(System.Nullable<System.DateTime> value);
    partial void OnopenedChanged();
    partial void OnclosedChanging(System.Nullable<System.DateTime> value);
    partial void OnclosedChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    partial void OnpricecloseChanging(System.Nullable<double> value);
    partial void OnpricecloseChanged();
    partial void OntradetypeidChanging(System.Nullable<long> value);
    partial void OntradetypeidChanged();
    partial void OnopenqtyChanging(System.Nullable<long> value);
    partial void OnopenqtyChanged();
    #endregion
		
		public positions()
		{
			this._stocks = default(EntityRef<stocks>);
			this._tradetypes = default(EntityRef<tradetypes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stock", DbType="BigInt NOT NULL")]
		public long stock
		{
			get
			{
				return this._stock;
			}
			set
			{
				if ((this._stock != value))
				{
					if (this._stocks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstockChanging(value);
					this.SendPropertyChanging();
					this._stock = value;
					this.SendPropertyChanged("stock");
					this.OnstockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceopen", DbType="Float")]
		public System.Nullable<double> priceopen
		{
			get
			{
				return this._priceopen;
			}
			set
			{
				if ((this._priceopen != value))
				{
					this.OnpriceopenChanging(value);
					this.SendPropertyChanging();
					this._priceopen = value;
					this.SendPropertyChanged("priceopen");
					this.OnpriceopenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qty", DbType="BigInt")]
		public System.Nullable<long> qty
		{
			get
			{
				return this._qty;
			}
			set
			{
				if ((this._qty != value))
				{
					this.OnqtyChanging(value);
					this.SendPropertyChanging();
					this._qty = value;
					this.SendPropertyChanged("qty");
					this.OnqtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_opened", DbType="DateTime")]
		public System.Nullable<System.DateTime> opened
		{
			get
			{
				return this._opened;
			}
			set
			{
				if ((this._opened != value))
				{
					this.OnopenedChanging(value);
					this.SendPropertyChanging();
					this._opened = value;
					this.SendPropertyChanged("opened");
					this.OnopenedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_closed", DbType="DateTime")]
		public System.Nullable<System.DateTime> closed
		{
			get
			{
				return this._closed;
			}
			set
			{
				if ((this._closed != value))
				{
					this.OnclosedChanging(value);
					this.SendPropertyChanging();
					this._closed = value;
					this.SendPropertyChanged("closed");
					this.OnclosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceclose", DbType="Float")]
		public System.Nullable<double> priceclose
		{
			get
			{
				return this._priceclose;
			}
			set
			{
				if ((this._priceclose != value))
				{
					this.OnpricecloseChanging(value);
					this.SendPropertyChanging();
					this._priceclose = value;
					this.SendPropertyChanged("priceclose");
					this.OnpricecloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tradetypeid", DbType="BigInt")]
		public System.Nullable<long> tradetypeid
		{
			get
			{
				return this._tradetypeid;
			}
			set
			{
				if ((this._tradetypeid != value))
				{
					if (this._tradetypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntradetypeidChanging(value);
					this.SendPropertyChanging();
					this._tradetypeid = value;
					this.SendPropertyChanged("tradetypeid");
					this.OntradetypeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_openqty", DbType="BigInt")]
		public System.Nullable<long> openqty
		{
			get
			{
				return this._openqty;
			}
			set
			{
				if ((this._openqty != value))
				{
					this.OnopenqtyChanging(value);
					this.SendPropertyChanging();
					this._openqty = value;
					this.SendPropertyChanged("openqty");
					this.OnopenqtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stocks_positions", Storage="_stocks", ThisKey="stock", OtherKey="id", IsForeignKey=true)]
		public stocks stocks
		{
			get
			{
				return this._stocks.Entity;
			}
			set
			{
				stocks previousValue = this._stocks.Entity;
				if (((previousValue != value) 
							|| (this._stocks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._stocks.Entity = null;
						previousValue.positions.Remove(this);
					}
					this._stocks.Entity = value;
					if ((value != null))
					{
						value.positions.Add(this);
						this._stock = value.id;
					}
					else
					{
						this._stock = default(long);
					}
					this.SendPropertyChanged("stocks");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tradetypes_positions", Storage="_tradetypes", ThisKey="tradetypeid", OtherKey="id", IsForeignKey=true)]
		public tradetypes tradetypes
		{
			get
			{
				return this._tradetypes.Entity;
			}
			set
			{
				tradetypes previousValue = this._tradetypes.Entity;
				if (((previousValue != value) 
							|| (this._tradetypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tradetypes.Entity = null;
						previousValue.positions.Remove(this);
					}
					this._tradetypes.Entity = value;
					if ((value != null))
					{
						value.positions.Add(this);
						this._tradetypeid = value.id;
					}
					else
					{
						this._tradetypeid = default(Nullable<long>);
					}
					this.SendPropertyChanged("tradetypes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.settingquotes")]
	public partial class settingquotes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _stock;
		
		private System.Nullable<long> _timeframe;
		
		private string _seccode;
		
		private string _classcode;
		
		private string _classname;
		
		private string _optionbase;
		
		private System.Nullable<System.DateTime> _matdate;
		
		private System.Nullable<long> _daystomatdate;
		
		private System.Nullable<long> _numbidsopen;
		
		private System.Nullable<long> _numbidshigh;
		
		private System.Nullable<long> _numbidslow;
		
		private System.Nullable<long> _numbidsclose;
		
		private System.Nullable<long> _numoffersopen;
		
		private System.Nullable<long> _numoffershigh;
		
		private System.Nullable<long> _numofferslow;
		
		private System.Nullable<long> _numoffersclose;
		
		private System.Nullable<long> _biddepthtopen;
		
		private System.Nullable<long> _biddepththigh;
		
		private System.Nullable<long> _biddepthtlow;
		
		private System.Nullable<long> _biddepthtclose;
		
		private System.Nullable<long> _offerdepthtopen;
		
		private System.Nullable<long> _offerdepththigh;
		
		private System.Nullable<long> _offerdepthtlow;
		
		private System.Nullable<long> _offerdepthtclose;
		
		private System.Nullable<long> _voltoday;
		
		private System.Nullable<double> _valtoday;
		
		private System.Nullable<long> _numtrades;
		
		private System.Nullable<long> _numcontractsopen;
		
		private System.Nullable<long> _numcontractshigh;
		
		private System.Nullable<long> _numcontractslow;
		
		private System.Nullable<long> _numcontractsclose;
		
		private System.Nullable<double> _selldepo;
		
		private System.Nullable<double> _buydepo;
		
		private System.Nullable<System.DateTime> _datetime;
		
		private System.Nullable<double> _strike;
		
		private string _optiontype;
		
		private System.Nullable<double> _volatility;
		
		private EntityRef<stocks> _stocks;
		
		private EntityRef<timeframes> _timeframes;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnstockChanging(System.Nullable<long> value);
    partial void OnstockChanged();
    partial void OntimeframeChanging(System.Nullable<long> value);
    partial void OntimeframeChanged();
    partial void OnseccodeChanging(string value);
    partial void OnseccodeChanged();
    partial void OnclasscodeChanging(string value);
    partial void OnclasscodeChanged();
    partial void OnclassnameChanging(string value);
    partial void OnclassnameChanged();
    partial void OnoptionbaseChanging(string value);
    partial void OnoptionbaseChanged();
    partial void OnmatdateChanging(System.Nullable<System.DateTime> value);
    partial void OnmatdateChanged();
    partial void OndaystomatdateChanging(System.Nullable<long> value);
    partial void OndaystomatdateChanged();
    partial void OnnumbidsopenChanging(System.Nullable<long> value);
    partial void OnnumbidsopenChanged();
    partial void OnnumbidshighChanging(System.Nullable<long> value);
    partial void OnnumbidshighChanged();
    partial void OnnumbidslowChanging(System.Nullable<long> value);
    partial void OnnumbidslowChanged();
    partial void OnnumbidscloseChanging(System.Nullable<long> value);
    partial void OnnumbidscloseChanged();
    partial void OnnumoffersopenChanging(System.Nullable<long> value);
    partial void OnnumoffersopenChanged();
    partial void OnnumoffershighChanging(System.Nullable<long> value);
    partial void OnnumoffershighChanged();
    partial void OnnumofferslowChanging(System.Nullable<long> value);
    partial void OnnumofferslowChanged();
    partial void OnnumofferscloseChanging(System.Nullable<long> value);
    partial void OnnumofferscloseChanged();
    partial void OnbiddepthtopenChanging(System.Nullable<long> value);
    partial void OnbiddepthtopenChanged();
    partial void OnbiddepththighChanging(System.Nullable<long> value);
    partial void OnbiddepththighChanged();
    partial void OnbiddepthtlowChanging(System.Nullable<long> value);
    partial void OnbiddepthtlowChanged();
    partial void OnbiddepthtcloseChanging(System.Nullable<long> value);
    partial void OnbiddepthtcloseChanged();
    partial void OnofferdepthtopenChanging(System.Nullable<long> value);
    partial void OnofferdepthtopenChanged();
    partial void OnofferdepththighChanging(System.Nullable<long> value);
    partial void OnofferdepththighChanged();
    partial void OnofferdepthtlowChanging(System.Nullable<long> value);
    partial void OnofferdepthtlowChanged();
    partial void OnofferdepthtcloseChanging(System.Nullable<long> value);
    partial void OnofferdepthtcloseChanged();
    partial void OnvoltodayChanging(System.Nullable<long> value);
    partial void OnvoltodayChanged();
    partial void OnvaltodayChanging(System.Nullable<double> value);
    partial void OnvaltodayChanged();
    partial void OnnumtradesChanging(System.Nullable<long> value);
    partial void OnnumtradesChanged();
    partial void OnnumcontractsopenChanging(System.Nullable<long> value);
    partial void OnnumcontractsopenChanged();
    partial void OnnumcontractshighChanging(System.Nullable<long> value);
    partial void OnnumcontractshighChanged();
    partial void OnnumcontractslowChanging(System.Nullable<long> value);
    partial void OnnumcontractslowChanged();
    partial void OnnumcontractscloseChanging(System.Nullable<long> value);
    partial void OnnumcontractscloseChanged();
    partial void OnselldepoChanging(System.Nullable<double> value);
    partial void OnselldepoChanged();
    partial void OnbuydepoChanging(System.Nullable<double> value);
    partial void OnbuydepoChanged();
    partial void OndatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OndatetimeChanged();
    partial void OnstrikeChanging(System.Nullable<double> value);
    partial void OnstrikeChanged();
    partial void OnoptiontypeChanging(string value);
    partial void OnoptiontypeChanged();
    partial void OnvolatilityChanging(System.Nullable<double> value);
    partial void OnvolatilityChanged();
    #endregion
		
		public settingquotes()
		{
			this._stocks = default(EntityRef<stocks>);
			this._timeframes = default(EntityRef<timeframes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stock", DbType="BigInt")]
		public System.Nullable<long> stock
		{
			get
			{
				return this._stock;
			}
			set
			{
				if ((this._stock != value))
				{
					if (this._stocks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstockChanging(value);
					this.SendPropertyChanging();
					this._stock = value;
					this.SendPropertyChanged("stock");
					this.OnstockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeframe", DbType="BigInt")]
		public System.Nullable<long> timeframe
		{
			get
			{
				return this._timeframe;
			}
			set
			{
				if ((this._timeframe != value))
				{
					if (this._timeframes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntimeframeChanging(value);
					this.SendPropertyChanging();
					this._timeframe = value;
					this.SendPropertyChanged("timeframe");
					this.OntimeframeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seccode", DbType="VarChar(50)")]
		public string seccode
		{
			get
			{
				return this._seccode;
			}
			set
			{
				if ((this._seccode != value))
				{
					this.OnseccodeChanging(value);
					this.SendPropertyChanging();
					this._seccode = value;
					this.SendPropertyChanged("seccode");
					this.OnseccodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classcode", DbType="VarChar(50)")]
		public string classcode
		{
			get
			{
				return this._classcode;
			}
			set
			{
				if ((this._classcode != value))
				{
					this.OnclasscodeChanging(value);
					this.SendPropertyChanging();
					this._classcode = value;
					this.SendPropertyChanged("classcode");
					this.OnclasscodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classname", DbType="VarChar(50)")]
		public string classname
		{
			get
			{
				return this._classname;
			}
			set
			{
				if ((this._classname != value))
				{
					this.OnclassnameChanging(value);
					this.SendPropertyChanging();
					this._classname = value;
					this.SendPropertyChanged("classname");
					this.OnclassnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_optionbase", DbType="VarChar(50)")]
		public string optionbase
		{
			get
			{
				return this._optionbase;
			}
			set
			{
				if ((this._optionbase != value))
				{
					this.OnoptionbaseChanging(value);
					this.SendPropertyChanging();
					this._optionbase = value;
					this.SendPropertyChanged("optionbase");
					this.OnoptionbaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_matdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> matdate
		{
			get
			{
				return this._matdate;
			}
			set
			{
				if ((this._matdate != value))
				{
					this.OnmatdateChanging(value);
					this.SendPropertyChanging();
					this._matdate = value;
					this.SendPropertyChanged("matdate");
					this.OnmatdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_daystomatdate", DbType="BigInt")]
		public System.Nullable<long> daystomatdate
		{
			get
			{
				return this._daystomatdate;
			}
			set
			{
				if ((this._daystomatdate != value))
				{
					this.OndaystomatdateChanging(value);
					this.SendPropertyChanging();
					this._daystomatdate = value;
					this.SendPropertyChanged("daystomatdate");
					this.OndaystomatdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numbidsopen", DbType="BigInt")]
		public System.Nullable<long> numbidsopen
		{
			get
			{
				return this._numbidsopen;
			}
			set
			{
				if ((this._numbidsopen != value))
				{
					this.OnnumbidsopenChanging(value);
					this.SendPropertyChanging();
					this._numbidsopen = value;
					this.SendPropertyChanged("numbidsopen");
					this.OnnumbidsopenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numbidshigh", DbType="BigInt")]
		public System.Nullable<long> numbidshigh
		{
			get
			{
				return this._numbidshigh;
			}
			set
			{
				if ((this._numbidshigh != value))
				{
					this.OnnumbidshighChanging(value);
					this.SendPropertyChanging();
					this._numbidshigh = value;
					this.SendPropertyChanged("numbidshigh");
					this.OnnumbidshighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numbidslow", DbType="BigInt")]
		public System.Nullable<long> numbidslow
		{
			get
			{
				return this._numbidslow;
			}
			set
			{
				if ((this._numbidslow != value))
				{
					this.OnnumbidslowChanging(value);
					this.SendPropertyChanging();
					this._numbidslow = value;
					this.SendPropertyChanged("numbidslow");
					this.OnnumbidslowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numbidsclose", DbType="BigInt")]
		public System.Nullable<long> numbidsclose
		{
			get
			{
				return this._numbidsclose;
			}
			set
			{
				if ((this._numbidsclose != value))
				{
					this.OnnumbidscloseChanging(value);
					this.SendPropertyChanging();
					this._numbidsclose = value;
					this.SendPropertyChanged("numbidsclose");
					this.OnnumbidscloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numoffersopen", DbType="BigInt")]
		public System.Nullable<long> numoffersopen
		{
			get
			{
				return this._numoffersopen;
			}
			set
			{
				if ((this._numoffersopen != value))
				{
					this.OnnumoffersopenChanging(value);
					this.SendPropertyChanging();
					this._numoffersopen = value;
					this.SendPropertyChanged("numoffersopen");
					this.OnnumoffersopenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numoffershigh", DbType="BigInt")]
		public System.Nullable<long> numoffershigh
		{
			get
			{
				return this._numoffershigh;
			}
			set
			{
				if ((this._numoffershigh != value))
				{
					this.OnnumoffershighChanging(value);
					this.SendPropertyChanging();
					this._numoffershigh = value;
					this.SendPropertyChanged("numoffershigh");
					this.OnnumoffershighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numofferslow", DbType="BigInt")]
		public System.Nullable<long> numofferslow
		{
			get
			{
				return this._numofferslow;
			}
			set
			{
				if ((this._numofferslow != value))
				{
					this.OnnumofferslowChanging(value);
					this.SendPropertyChanging();
					this._numofferslow = value;
					this.SendPropertyChanged("numofferslow");
					this.OnnumofferslowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numoffersclose", DbType="BigInt")]
		public System.Nullable<long> numoffersclose
		{
			get
			{
				return this._numoffersclose;
			}
			set
			{
				if ((this._numoffersclose != value))
				{
					this.OnnumofferscloseChanging(value);
					this.SendPropertyChanging();
					this._numoffersclose = value;
					this.SendPropertyChanged("numoffersclose");
					this.OnnumofferscloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_biddepthtopen", DbType="BigInt")]
		public System.Nullable<long> biddepthtopen
		{
			get
			{
				return this._biddepthtopen;
			}
			set
			{
				if ((this._biddepthtopen != value))
				{
					this.OnbiddepthtopenChanging(value);
					this.SendPropertyChanging();
					this._biddepthtopen = value;
					this.SendPropertyChanged("biddepthtopen");
					this.OnbiddepthtopenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_biddepththigh", DbType="BigInt")]
		public System.Nullable<long> biddepththigh
		{
			get
			{
				return this._biddepththigh;
			}
			set
			{
				if ((this._biddepththigh != value))
				{
					this.OnbiddepththighChanging(value);
					this.SendPropertyChanging();
					this._biddepththigh = value;
					this.SendPropertyChanged("biddepththigh");
					this.OnbiddepththighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_biddepthtlow", DbType="BigInt")]
		public System.Nullable<long> biddepthtlow
		{
			get
			{
				return this._biddepthtlow;
			}
			set
			{
				if ((this._biddepthtlow != value))
				{
					this.OnbiddepthtlowChanging(value);
					this.SendPropertyChanging();
					this._biddepthtlow = value;
					this.SendPropertyChanged("biddepthtlow");
					this.OnbiddepthtlowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_biddepthtclose", DbType="BigInt")]
		public System.Nullable<long> biddepthtclose
		{
			get
			{
				return this._biddepthtclose;
			}
			set
			{
				if ((this._biddepthtclose != value))
				{
					this.OnbiddepthtcloseChanging(value);
					this.SendPropertyChanging();
					this._biddepthtclose = value;
					this.SendPropertyChanged("biddepthtclose");
					this.OnbiddepthtcloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_offerdepthtopen", DbType="BigInt")]
		public System.Nullable<long> offerdepthtopen
		{
			get
			{
				return this._offerdepthtopen;
			}
			set
			{
				if ((this._offerdepthtopen != value))
				{
					this.OnofferdepthtopenChanging(value);
					this.SendPropertyChanging();
					this._offerdepthtopen = value;
					this.SendPropertyChanged("offerdepthtopen");
					this.OnofferdepthtopenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_offerdepththigh", DbType="BigInt")]
		public System.Nullable<long> offerdepththigh
		{
			get
			{
				return this._offerdepththigh;
			}
			set
			{
				if ((this._offerdepththigh != value))
				{
					this.OnofferdepththighChanging(value);
					this.SendPropertyChanging();
					this._offerdepththigh = value;
					this.SendPropertyChanged("offerdepththigh");
					this.OnofferdepththighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_offerdepthtlow", DbType="BigInt")]
		public System.Nullable<long> offerdepthtlow
		{
			get
			{
				return this._offerdepthtlow;
			}
			set
			{
				if ((this._offerdepthtlow != value))
				{
					this.OnofferdepthtlowChanging(value);
					this.SendPropertyChanging();
					this._offerdepthtlow = value;
					this.SendPropertyChanged("offerdepthtlow");
					this.OnofferdepthtlowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_offerdepthtclose", DbType="BigInt")]
		public System.Nullable<long> offerdepthtclose
		{
			get
			{
				return this._offerdepthtclose;
			}
			set
			{
				if ((this._offerdepthtclose != value))
				{
					this.OnofferdepthtcloseChanging(value);
					this.SendPropertyChanging();
					this._offerdepthtclose = value;
					this.SendPropertyChanged("offerdepthtclose");
					this.OnofferdepthtcloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_voltoday", DbType="BigInt")]
		public System.Nullable<long> voltoday
		{
			get
			{
				return this._voltoday;
			}
			set
			{
				if ((this._voltoday != value))
				{
					this.OnvoltodayChanging(value);
					this.SendPropertyChanging();
					this._voltoday = value;
					this.SendPropertyChanged("voltoday");
					this.OnvoltodayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_valtoday", DbType="Float")]
		public System.Nullable<double> valtoday
		{
			get
			{
				return this._valtoday;
			}
			set
			{
				if ((this._valtoday != value))
				{
					this.OnvaltodayChanging(value);
					this.SendPropertyChanging();
					this._valtoday = value;
					this.SendPropertyChanged("valtoday");
					this.OnvaltodayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numtrades", DbType="BigInt")]
		public System.Nullable<long> numtrades
		{
			get
			{
				return this._numtrades;
			}
			set
			{
				if ((this._numtrades != value))
				{
					this.OnnumtradesChanging(value);
					this.SendPropertyChanging();
					this._numtrades = value;
					this.SendPropertyChanged("numtrades");
					this.OnnumtradesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numcontractsopen", DbType="BigInt")]
		public System.Nullable<long> numcontractsopen
		{
			get
			{
				return this._numcontractsopen;
			}
			set
			{
				if ((this._numcontractsopen != value))
				{
					this.OnnumcontractsopenChanging(value);
					this.SendPropertyChanging();
					this._numcontractsopen = value;
					this.SendPropertyChanged("numcontractsopen");
					this.OnnumcontractsopenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numcontractshigh", DbType="BigInt")]
		public System.Nullable<long> numcontractshigh
		{
			get
			{
				return this._numcontractshigh;
			}
			set
			{
				if ((this._numcontractshigh != value))
				{
					this.OnnumcontractshighChanging(value);
					this.SendPropertyChanging();
					this._numcontractshigh = value;
					this.SendPropertyChanged("numcontractshigh");
					this.OnnumcontractshighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numcontractslow", DbType="BigInt")]
		public System.Nullable<long> numcontractslow
		{
			get
			{
				return this._numcontractslow;
			}
			set
			{
				if ((this._numcontractslow != value))
				{
					this.OnnumcontractslowChanging(value);
					this.SendPropertyChanging();
					this._numcontractslow = value;
					this.SendPropertyChanged("numcontractslow");
					this.OnnumcontractslowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numcontractsclose", DbType="BigInt")]
		public System.Nullable<long> numcontractsclose
		{
			get
			{
				return this._numcontractsclose;
			}
			set
			{
				if ((this._numcontractsclose != value))
				{
					this.OnnumcontractscloseChanging(value);
					this.SendPropertyChanging();
					this._numcontractsclose = value;
					this.SendPropertyChanged("numcontractsclose");
					this.OnnumcontractscloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_selldepo", DbType="Float")]
		public System.Nullable<double> selldepo
		{
			get
			{
				return this._selldepo;
			}
			set
			{
				if ((this._selldepo != value))
				{
					this.OnselldepoChanging(value);
					this.SendPropertyChanging();
					this._selldepo = value;
					this.SendPropertyChanged("selldepo");
					this.OnselldepoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buydepo", DbType="Float")]
		public System.Nullable<double> buydepo
		{
			get
			{
				return this._buydepo;
			}
			set
			{
				if ((this._buydepo != value))
				{
					this.OnbuydepoChanging(value);
					this.SendPropertyChanging();
					this._buydepo = value;
					this.SendPropertyChanged("buydepo");
					this.OnbuydepoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> datetime
		{
			get
			{
				return this._datetime;
			}
			set
			{
				if ((this._datetime != value))
				{
					this.OndatetimeChanging(value);
					this.SendPropertyChanging();
					this._datetime = value;
					this.SendPropertyChanged("datetime");
					this.OndatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strike", DbType="Float")]
		public System.Nullable<double> strike
		{
			get
			{
				return this._strike;
			}
			set
			{
				if ((this._strike != value))
				{
					this.OnstrikeChanging(value);
					this.SendPropertyChanging();
					this._strike = value;
					this.SendPropertyChanged("strike");
					this.OnstrikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_optiontype", DbType="VarChar(50)")]
		public string optiontype
		{
			get
			{
				return this._optiontype;
			}
			set
			{
				if ((this._optiontype != value))
				{
					this.OnoptiontypeChanging(value);
					this.SendPropertyChanging();
					this._optiontype = value;
					this.SendPropertyChanged("optiontype");
					this.OnoptiontypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_volatility", DbType="Float")]
		public System.Nullable<double> volatility
		{
			get
			{
				return this._volatility;
			}
			set
			{
				if ((this._volatility != value))
				{
					this.OnvolatilityChanging(value);
					this.SendPropertyChanging();
					this._volatility = value;
					this.SendPropertyChanged("volatility");
					this.OnvolatilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stocks_settingquotes", Storage="_stocks", ThisKey="stock", OtherKey="id", IsForeignKey=true)]
		public stocks stocks
		{
			get
			{
				return this._stocks.Entity;
			}
			set
			{
				stocks previousValue = this._stocks.Entity;
				if (((previousValue != value) 
							|| (this._stocks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._stocks.Entity = null;
						previousValue.settingquotes.Remove(this);
					}
					this._stocks.Entity = value;
					if ((value != null))
					{
						value.settingquotes.Add(this);
						this._stock = value.id;
					}
					else
					{
						this._stock = default(Nullable<long>);
					}
					this.SendPropertyChanged("stocks");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="timeframes_settingquotes", Storage="_timeframes", ThisKey="timeframe", OtherKey="id", IsForeignKey=true)]
		public timeframes timeframes
		{
			get
			{
				return this._timeframes.Entity;
			}
			set
			{
				timeframes previousValue = this._timeframes.Entity;
				if (((previousValue != value) 
							|| (this._timeframes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._timeframes.Entity = null;
						previousValue.settingquotes.Remove(this);
					}
					this._timeframes.Entity = value;
					if ((value != null))
					{
						value.settingquotes.Add(this);
						this._timeframe = value.id;
					}
					else
					{
						this._timeframe = default(Nullable<long>);
					}
					this.SendPropertyChanged("timeframes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.stocks")]
	public partial class stocks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _ticker;
		
		private System.Nullable<System.DateTime> _enddate;
		
		private System.Nullable<float> _pricestep;
		
		private System.Nullable<bool> _active;
		
		private EntitySet<orders> _orders;
		
		private EntitySet<positions> _positions;
		
		private EntitySet<settingquotes> _settingquotes;
		
		private EntitySet<valueatrisk> _valueatrisk;
		
		private EntitySet<tickquotes> _tickquotes;
		
		private EntitySet<volquotes> _volquotes;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntickerChanging(string value);
    partial void OntickerChanged();
    partial void OnenddateChanging(System.Nullable<System.DateTime> value);
    partial void OnenddateChanged();
    partial void OnpricestepChanging(System.Nullable<float> value);
    partial void OnpricestepChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    #endregion
		
		public stocks()
		{
			this._orders = new EntitySet<orders>(new Action<orders>(this.attach_orders), new Action<orders>(this.detach_orders));
			this._positions = new EntitySet<positions>(new Action<positions>(this.attach_positions), new Action<positions>(this.detach_positions));
			this._settingquotes = new EntitySet<settingquotes>(new Action<settingquotes>(this.attach_settingquotes), new Action<settingquotes>(this.detach_settingquotes));
			this._valueatrisk = new EntitySet<valueatrisk>(new Action<valueatrisk>(this.attach_valueatrisk), new Action<valueatrisk>(this.detach_valueatrisk));
			this._tickquotes = new EntitySet<tickquotes>(new Action<tickquotes>(this.attach_tickquotes), new Action<tickquotes>(this.detach_tickquotes));
			this._volquotes = new EntitySet<volquotes>(new Action<volquotes>(this.attach_volquotes), new Action<volquotes>(this.detach_volquotes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticker", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ticker
		{
			get
			{
				return this._ticker;
			}
			set
			{
				if ((this._ticker != value))
				{
					this.OntickerChanging(value);
					this.SendPropertyChanging();
					this._ticker = value;
					this.SendPropertyChanged("ticker");
					this.OntickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enddate", DbType="Date")]
		public System.Nullable<System.DateTime> enddate
		{
			get
			{
				return this._enddate;
			}
			set
			{
				if ((this._enddate != value))
				{
					this.OnenddateChanging(value);
					this.SendPropertyChanging();
					this._enddate = value;
					this.SendPropertyChanged("enddate");
					this.OnenddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pricestep", DbType="Real")]
		public System.Nullable<float> pricestep
		{
			get
			{
				return this._pricestep;
			}
			set
			{
				if ((this._pricestep != value))
				{
					this.OnpricestepChanging(value);
					this.SendPropertyChanging();
					this._pricestep = value;
					this.SendPropertyChanged("pricestep");
					this.OnpricestepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stocks_orders", Storage="_orders", ThisKey="id", OtherKey="stock")]
		public EntitySet<orders> orders
		{
			get
			{
				return this._orders;
			}
			set
			{
				this._orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stocks_positions", Storage="_positions", ThisKey="id", OtherKey="stock")]
		public EntitySet<positions> positions
		{
			get
			{
				return this._positions;
			}
			set
			{
				this._positions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stocks_settingquotes", Storage="_settingquotes", ThisKey="id", OtherKey="stock")]
		public EntitySet<settingquotes> settingquotes
		{
			get
			{
				return this._settingquotes;
			}
			set
			{
				this._settingquotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stocks_valueatrisk", Storage="_valueatrisk", ThisKey="id", OtherKey="stock")]
		public EntitySet<valueatrisk> valueatrisk
		{
			get
			{
				return this._valueatrisk;
			}
			set
			{
				this._valueatrisk.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stocks_tickquotes", Storage="_tickquotes", ThisKey="id", OtherKey="stock")]
		public EntitySet<tickquotes> tickquotes
		{
			get
			{
				return this._tickquotes;
			}
			set
			{
				this._tickquotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stocks_volquotes", Storage="_volquotes", ThisKey="id", OtherKey="stock")]
		public EntitySet<volquotes> volquotes
		{
			get
			{
				return this._volquotes;
			}
			set
			{
				this._volquotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.stocks = this;
		}
		
		private void detach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.stocks = null;
		}
		
		private void attach_positions(positions entity)
		{
			this.SendPropertyChanging();
			entity.stocks = this;
		}
		
		private void detach_positions(positions entity)
		{
			this.SendPropertyChanging();
			entity.stocks = null;
		}
		
		private void attach_settingquotes(settingquotes entity)
		{
			this.SendPropertyChanging();
			entity.stocks = this;
		}
		
		private void detach_settingquotes(settingquotes entity)
		{
			this.SendPropertyChanging();
			entity.stocks = null;
		}
		
		private void attach_valueatrisk(valueatrisk entity)
		{
			this.SendPropertyChanging();
			entity.stocks = this;
		}
		
		private void detach_valueatrisk(valueatrisk entity)
		{
			this.SendPropertyChanging();
			entity.stocks = null;
		}
		
		private void attach_tickquotes(tickquotes entity)
		{
			this.SendPropertyChanging();
			entity.stocks = this;
		}
		
		private void detach_tickquotes(tickquotes entity)
		{
			this.SendPropertyChanging();
			entity.stocks = null;
		}
		
		private void attach_volquotes(volquotes entity)
		{
			this.SendPropertyChanging();
			entity.stocks = this;
		}
		
		private void detach_volquotes(volquotes entity)
		{
			this.SendPropertyChanging();
			entity.stocks = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.timeframes")]
	public partial class timeframes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _timeframename;
		
		private System.Nullable<long> _timeframemin;
		
		private System.Nullable<long> _timeframesec;
		
		private System.Nullable<bool> _active;
		
		private EntitySet<settingquotes> _settingquotes;
		
		private EntitySet<valueatrisk> _valueatrisk;
		
		private EntitySet<volquotes> _volquotes;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntimeframenameChanging(string value);
    partial void OntimeframenameChanged();
    partial void OntimeframeminChanging(System.Nullable<long> value);
    partial void OntimeframeminChanged();
    partial void OntimeframesecChanging(System.Nullable<long> value);
    partial void OntimeframesecChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    #endregion
		
		public timeframes()
		{
			this._settingquotes = new EntitySet<settingquotes>(new Action<settingquotes>(this.attach_settingquotes), new Action<settingquotes>(this.detach_settingquotes));
			this._valueatrisk = new EntitySet<valueatrisk>(new Action<valueatrisk>(this.attach_valueatrisk), new Action<valueatrisk>(this.detach_valueatrisk));
			this._volquotes = new EntitySet<volquotes>(new Action<volquotes>(this.attach_volquotes), new Action<volquotes>(this.detach_volquotes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeframename", DbType="VarChar(100)")]
		public string timeframename
		{
			get
			{
				return this._timeframename;
			}
			set
			{
				if ((this._timeframename != value))
				{
					this.OntimeframenameChanging(value);
					this.SendPropertyChanging();
					this._timeframename = value;
					this.SendPropertyChanged("timeframename");
					this.OntimeframenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeframemin", DbType="BigInt")]
		public System.Nullable<long> timeframemin
		{
			get
			{
				return this._timeframemin;
			}
			set
			{
				if ((this._timeframemin != value))
				{
					this.OntimeframeminChanging(value);
					this.SendPropertyChanging();
					this._timeframemin = value;
					this.SendPropertyChanged("timeframemin");
					this.OntimeframeminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeframesec", DbType="BigInt")]
		public System.Nullable<long> timeframesec
		{
			get
			{
				return this._timeframesec;
			}
			set
			{
				if ((this._timeframesec != value))
				{
					this.OntimeframesecChanging(value);
					this.SendPropertyChanging();
					this._timeframesec = value;
					this.SendPropertyChanged("timeframesec");
					this.OntimeframesecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="timeframes_settingquotes", Storage="_settingquotes", ThisKey="id", OtherKey="timeframe")]
		public EntitySet<settingquotes> settingquotes
		{
			get
			{
				return this._settingquotes;
			}
			set
			{
				this._settingquotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="timeframes_valueatrisk", Storage="_valueatrisk", ThisKey="id", OtherKey="timeframe")]
		public EntitySet<valueatrisk> valueatrisk
		{
			get
			{
				return this._valueatrisk;
			}
			set
			{
				this._valueatrisk.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="timeframes_volquotes", Storage="_volquotes", ThisKey="id", OtherKey="timeframe")]
		public EntitySet<volquotes> volquotes
		{
			get
			{
				return this._volquotes;
			}
			set
			{
				this._volquotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_settingquotes(settingquotes entity)
		{
			this.SendPropertyChanging();
			entity.timeframes = this;
		}
		
		private void detach_settingquotes(settingquotes entity)
		{
			this.SendPropertyChanging();
			entity.timeframes = null;
		}
		
		private void attach_valueatrisk(valueatrisk entity)
		{
			this.SendPropertyChanging();
			entity.timeframes = this;
		}
		
		private void detach_valueatrisk(valueatrisk entity)
		{
			this.SendPropertyChanging();
			entity.timeframes = null;
		}
		
		private void attach_volquotes(volquotes entity)
		{
			this.SendPropertyChanging();
			entity.timeframes = this;
		}
		
		private void detach_volquotes(volquotes entity)
		{
			this.SendPropertyChanging();
			entity.timeframes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tradetypes")]
	public partial class tradetypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _type;
		
		private EntitySet<orders> _orders;
		
		private EntitySet<positions> _positions;
		
		private EntitySet<tickquotes> _tickquotes;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
		
		public tradetypes()
		{
			this._orders = new EntitySet<orders>(new Action<orders>(this.attach_orders), new Action<orders>(this.detach_orders));
			this._positions = new EntitySet<positions>(new Action<positions>(this.attach_positions), new Action<positions>(this.detach_positions));
			this._tickquotes = new EntitySet<tickquotes>(new Action<tickquotes>(this.attach_tickquotes), new Action<tickquotes>(this.detach_tickquotes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tradetypes_orders", Storage="_orders", ThisKey="id", OtherKey="tradetypeid")]
		public EntitySet<orders> orders
		{
			get
			{
				return this._orders;
			}
			set
			{
				this._orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tradetypes_positions", Storage="_positions", ThisKey="id", OtherKey="tradetypeid")]
		public EntitySet<positions> positions
		{
			get
			{
				return this._positions;
			}
			set
			{
				this._positions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tradetypes_tickquotes", Storage="_tickquotes", ThisKey="id", OtherKey="tradetypeid")]
		public EntitySet<tickquotes> tickquotes
		{
			get
			{
				return this._tickquotes;
			}
			set
			{
				this._tickquotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.tradetypes = this;
		}
		
		private void detach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.tradetypes = null;
		}
		
		private void attach_positions(positions entity)
		{
			this.SendPropertyChanging();
			entity.tradetypes = this;
		}
		
		private void detach_positions(positions entity)
		{
			this.SendPropertyChanging();
			entity.tradetypes = null;
		}
		
		private void attach_tickquotes(tickquotes entity)
		{
			this.SendPropertyChanging();
			entity.tradetypes = this;
		}
		
		private void detach_tickquotes(tickquotes entity)
		{
			this.SendPropertyChanging();
			entity.tradetypes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.valueatrisk")]
	public partial class valueatrisk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _stock;
		
		private long _timeframe;
		
		private System.Nullable<System.DateTime> _datetime;
		
		private long _volquoteid;
		
		private System.Nullable<double> _value;
		
		private System.Nullable<double> _buydepo;
		
		private EntityRef<stocks> _stocks;
		
		private EntityRef<timeframes> _timeframes;
		
		private EntityRef<volquotes> _volquotes;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnstockChanging(long value);
    partial void OnstockChanged();
    partial void OntimeframeChanging(long value);
    partial void OntimeframeChanged();
    partial void OndatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OndatetimeChanged();
    partial void OnvolquoteidChanging(long value);
    partial void OnvolquoteidChanged();
    partial void OnvalueChanging(System.Nullable<double> value);
    partial void OnvalueChanged();
    partial void OnbuydepoChanging(System.Nullable<double> value);
    partial void OnbuydepoChanged();
    #endregion
		
		public valueatrisk()
		{
			this._stocks = default(EntityRef<stocks>);
			this._timeframes = default(EntityRef<timeframes>);
			this._volquotes = default(EntityRef<volquotes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stock", DbType="BigInt NOT NULL")]
		public long stock
		{
			get
			{
				return this._stock;
			}
			set
			{
				if ((this._stock != value))
				{
					if (this._stocks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstockChanging(value);
					this.SendPropertyChanging();
					this._stock = value;
					this.SendPropertyChanged("stock");
					this.OnstockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeframe", DbType="BigInt NOT NULL")]
		public long timeframe
		{
			get
			{
				return this._timeframe;
			}
			set
			{
				if ((this._timeframe != value))
				{
					if (this._timeframes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntimeframeChanging(value);
					this.SendPropertyChanging();
					this._timeframe = value;
					this.SendPropertyChanged("timeframe");
					this.OntimeframeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> datetime
		{
			get
			{
				return this._datetime;
			}
			set
			{
				if ((this._datetime != value))
				{
					this.OndatetimeChanging(value);
					this.SendPropertyChanging();
					this._datetime = value;
					this.SendPropertyChanged("datetime");
					this.OndatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_volquoteid", DbType="BigInt NOT NULL")]
		public long volquoteid
		{
			get
			{
				return this._volquoteid;
			}
			set
			{
				if ((this._volquoteid != value))
				{
					if (this._volquotes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvolquoteidChanging(value);
					this.SendPropertyChanging();
					this._volquoteid = value;
					this.SendPropertyChanged("volquoteid");
					this.OnvolquoteidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Float")]
		public System.Nullable<double> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buydepo", DbType="Float")]
		public System.Nullable<double> buydepo
		{
			get
			{
				return this._buydepo;
			}
			set
			{
				if ((this._buydepo != value))
				{
					this.OnbuydepoChanging(value);
					this.SendPropertyChanging();
					this._buydepo = value;
					this.SendPropertyChanged("buydepo");
					this.OnbuydepoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stocks_valueatrisk", Storage="_stocks", ThisKey="stock", OtherKey="id", IsForeignKey=true)]
		public stocks stocks
		{
			get
			{
				return this._stocks.Entity;
			}
			set
			{
				stocks previousValue = this._stocks.Entity;
				if (((previousValue != value) 
							|| (this._stocks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._stocks.Entity = null;
						previousValue.valueatrisk.Remove(this);
					}
					this._stocks.Entity = value;
					if ((value != null))
					{
						value.valueatrisk.Add(this);
						this._stock = value.id;
					}
					else
					{
						this._stock = default(long);
					}
					this.SendPropertyChanged("stocks");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="timeframes_valueatrisk", Storage="_timeframes", ThisKey="timeframe", OtherKey="id", IsForeignKey=true)]
		public timeframes timeframes
		{
			get
			{
				return this._timeframes.Entity;
			}
			set
			{
				timeframes previousValue = this._timeframes.Entity;
				if (((previousValue != value) 
							|| (this._timeframes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._timeframes.Entity = null;
						previousValue.valueatrisk.Remove(this);
					}
					this._timeframes.Entity = value;
					if ((value != null))
					{
						value.valueatrisk.Add(this);
						this._timeframe = value.id;
					}
					else
					{
						this._timeframe = default(long);
					}
					this.SendPropertyChanged("timeframes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="volquotes_valueatrisk", Storage="_volquotes", ThisKey="volquoteid", OtherKey="id", IsForeignKey=true)]
		public volquotes volquotes
		{
			get
			{
				return this._volquotes.Entity;
			}
			set
			{
				volquotes previousValue = this._volquotes.Entity;
				if (((previousValue != value) 
							|| (this._volquotes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._volquotes.Entity = null;
						previousValue.valueatrisk.Remove(this);
					}
					this._volquotes.Entity = value;
					if ((value != null))
					{
						value.valueatrisk.Add(this);
						this._volquoteid = value.id;
					}
					else
					{
						this._volquoteid = default(long);
					}
					this.SendPropertyChanged("volquotes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tickquotes")]
	public partial class tickquotes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _stock;
		
		private System.Nullable<System.DateTime> _datetime;
		
		private System.Nullable<double> _price;
		
		private System.Nullable<int> _volume;
		
		private System.Nullable<int> _volumebuy;
		
		private System.Nullable<int> _volumesell;
		
		private System.Nullable<long> _tradetypeid;
		
		private EntityRef<stocks> _stocks;
		
		private EntityRef<tradetypes> _tradetypes;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnstockChanging(long value);
    partial void OnstockChanged();
    partial void OndatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OndatetimeChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    partial void OnvolumeChanging(System.Nullable<int> value);
    partial void OnvolumeChanged();
    partial void OnvolumebuyChanging(System.Nullable<int> value);
    partial void OnvolumebuyChanged();
    partial void OnvolumesellChanging(System.Nullable<int> value);
    partial void OnvolumesellChanged();
    partial void OntradetypeidChanging(System.Nullable<long> value);
    partial void OntradetypeidChanged();
    #endregion
		
		public tickquotes()
		{
			this._stocks = default(EntityRef<stocks>);
			this._tradetypes = default(EntityRef<tradetypes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stock", DbType="BigInt NOT NULL")]
		public long stock
		{
			get
			{
				return this._stock;
			}
			set
			{
				if ((this._stock != value))
				{
					if (this._stocks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstockChanging(value);
					this.SendPropertyChanging();
					this._stock = value;
					this.SendPropertyChanged("stock");
					this.OnstockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> datetime
		{
			get
			{
				return this._datetime;
			}
			set
			{
				if ((this._datetime != value))
				{
					this.OndatetimeChanging(value);
					this.SendPropertyChanging();
					this._datetime = value;
					this.SendPropertyChanged("datetime");
					this.OndatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_volume", DbType="Int")]
		public System.Nullable<int> volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if ((this._volume != value))
				{
					this.OnvolumeChanging(value);
					this.SendPropertyChanging();
					this._volume = value;
					this.SendPropertyChanged("volume");
					this.OnvolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_volumebuy", DbType="Int")]
		public System.Nullable<int> volumebuy
		{
			get
			{
				return this._volumebuy;
			}
			set
			{
				if ((this._volumebuy != value))
				{
					this.OnvolumebuyChanging(value);
					this.SendPropertyChanging();
					this._volumebuy = value;
					this.SendPropertyChanged("volumebuy");
					this.OnvolumebuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_volumesell", DbType="Int")]
		public System.Nullable<int> volumesell
		{
			get
			{
				return this._volumesell;
			}
			set
			{
				if ((this._volumesell != value))
				{
					this.OnvolumesellChanging(value);
					this.SendPropertyChanging();
					this._volumesell = value;
					this.SendPropertyChanged("volumesell");
					this.OnvolumesellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tradetypeid", DbType="BigInt")]
		public System.Nullable<long> tradetypeid
		{
			get
			{
				return this._tradetypeid;
			}
			set
			{
				if ((this._tradetypeid != value))
				{
					if (this._tradetypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntradetypeidChanging(value);
					this.SendPropertyChanging();
					this._tradetypeid = value;
					this.SendPropertyChanged("tradetypeid");
					this.OntradetypeidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stocks_tickquotes", Storage="_stocks", ThisKey="stock", OtherKey="id", IsForeignKey=true)]
		public stocks stocks
		{
			get
			{
				return this._stocks.Entity;
			}
			set
			{
				stocks previousValue = this._stocks.Entity;
				if (((previousValue != value) 
							|| (this._stocks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._stocks.Entity = null;
						previousValue.tickquotes.Remove(this);
					}
					this._stocks.Entity = value;
					if ((value != null))
					{
						value.tickquotes.Add(this);
						this._stock = value.id;
					}
					else
					{
						this._stock = default(long);
					}
					this.SendPropertyChanged("stocks");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tradetypes_tickquotes", Storage="_tradetypes", ThisKey="tradetypeid", OtherKey="id", IsForeignKey=true)]
		public tradetypes tradetypes
		{
			get
			{
				return this._tradetypes.Entity;
			}
			set
			{
				tradetypes previousValue = this._tradetypes.Entity;
				if (((previousValue != value) 
							|| (this._tradetypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tradetypes.Entity = null;
						previousValue.tickquotes.Remove(this);
					}
					this._tradetypes.Entity = value;
					if ((value != null))
					{
						value.tickquotes.Add(this);
						this._tradetypeid = value.id;
					}
					else
					{
						this._tradetypeid = default(Nullable<long>);
					}
					this.SendPropertyChanged("tradetypes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.volquotes")]
	public partial class volquotes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _stock;
		
		private long _timeframe;
		
		private System.Nullable<System.DateTime> _datetime;
		
		private System.Nullable<double> _high;
		
		private System.Nullable<double> _low;
		
		private System.Nullable<double> _open;
		
		private System.Nullable<double> _close;
		
		private System.Nullable<double> _middle;
		
		private System.Nullable<double> _volume;
		
		private System.Nullable<double> _volumebuy;
		
		private System.Nullable<double> _volumesell;
		
		private EntitySet<valueatrisk> _valueatrisk;
		
		private EntityRef<stocks> _stocks;
		
		private EntityRef<timeframes> _timeframes;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnstockChanging(long value);
    partial void OnstockChanged();
    partial void OntimeframeChanging(long value);
    partial void OntimeframeChanged();
    partial void OndatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OndatetimeChanged();
    partial void OnhighChanging(System.Nullable<double> value);
    partial void OnhighChanged();
    partial void OnlowChanging(System.Nullable<double> value);
    partial void OnlowChanged();
    partial void OnopenChanging(System.Nullable<double> value);
    partial void OnopenChanged();
    partial void OncloseChanging(System.Nullable<double> value);
    partial void OncloseChanged();
    partial void OnmiddleChanging(System.Nullable<double> value);
    partial void OnmiddleChanged();
    partial void OnvolumeChanging(System.Nullable<double> value);
    partial void OnvolumeChanged();
    partial void OnvolumebuyChanging(System.Nullable<double> value);
    partial void OnvolumebuyChanged();
    partial void OnvolumesellChanging(System.Nullable<double> value);
    partial void OnvolumesellChanged();
    #endregion
		
		public volquotes()
		{
			this._valueatrisk = new EntitySet<valueatrisk>(new Action<valueatrisk>(this.attach_valueatrisk), new Action<valueatrisk>(this.detach_valueatrisk));
			this._stocks = default(EntityRef<stocks>);
			this._timeframes = default(EntityRef<timeframes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stock", DbType="BigInt NOT NULL")]
		public long stock
		{
			get
			{
				return this._stock;
			}
			set
			{
				if ((this._stock != value))
				{
					if (this._stocks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstockChanging(value);
					this.SendPropertyChanging();
					this._stock = value;
					this.SendPropertyChanged("stock");
					this.OnstockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeframe", DbType="BigInt NOT NULL")]
		public long timeframe
		{
			get
			{
				return this._timeframe;
			}
			set
			{
				if ((this._timeframe != value))
				{
					if (this._timeframes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntimeframeChanging(value);
					this.SendPropertyChanging();
					this._timeframe = value;
					this.SendPropertyChanged("timeframe");
					this.OntimeframeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> datetime
		{
			get
			{
				return this._datetime;
			}
			set
			{
				if ((this._datetime != value))
				{
					this.OndatetimeChanging(value);
					this.SendPropertyChanging();
					this._datetime = value;
					this.SendPropertyChanged("datetime");
					this.OndatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_high", DbType="Float")]
		public System.Nullable<double> high
		{
			get
			{
				return this._high;
			}
			set
			{
				if ((this._high != value))
				{
					this.OnhighChanging(value);
					this.SendPropertyChanging();
					this._high = value;
					this.SendPropertyChanged("high");
					this.OnhighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_low", DbType="Float")]
		public System.Nullable<double> low
		{
			get
			{
				return this._low;
			}
			set
			{
				if ((this._low != value))
				{
					this.OnlowChanging(value);
					this.SendPropertyChanging();
					this._low = value;
					this.SendPropertyChanged("low");
					this.OnlowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[open]", Storage="_open", DbType="Float")]
		public System.Nullable<double> open
		{
			get
			{
				return this._open;
			}
			set
			{
				if ((this._open != value))
				{
					this.OnopenChanging(value);
					this.SendPropertyChanging();
					this._open = value;
					this.SendPropertyChanged("open");
					this.OnopenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[close]", Storage="_close", DbType="Float")]
		public System.Nullable<double> close
		{
			get
			{
				return this._close;
			}
			set
			{
				if ((this._close != value))
				{
					this.OncloseChanging(value);
					this.SendPropertyChanging();
					this._close = value;
					this.SendPropertyChanged("close");
					this.OncloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_middle", DbType="Float")]
		public System.Nullable<double> middle
		{
			get
			{
				return this._middle;
			}
			set
			{
				if ((this._middle != value))
				{
					this.OnmiddleChanging(value);
					this.SendPropertyChanging();
					this._middle = value;
					this.SendPropertyChanged("middle");
					this.OnmiddleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_volume", DbType="Float")]
		public System.Nullable<double> volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if ((this._volume != value))
				{
					this.OnvolumeChanging(value);
					this.SendPropertyChanging();
					this._volume = value;
					this.SendPropertyChanged("volume");
					this.OnvolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_volumebuy", DbType="Float")]
		public System.Nullable<double> volumebuy
		{
			get
			{
				return this._volumebuy;
			}
			set
			{
				if ((this._volumebuy != value))
				{
					this.OnvolumebuyChanging(value);
					this.SendPropertyChanging();
					this._volumebuy = value;
					this.SendPropertyChanged("volumebuy");
					this.OnvolumebuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_volumesell", DbType="Float")]
		public System.Nullable<double> volumesell
		{
			get
			{
				return this._volumesell;
			}
			set
			{
				if ((this._volumesell != value))
				{
					this.OnvolumesellChanging(value);
					this.SendPropertyChanging();
					this._volumesell = value;
					this.SendPropertyChanged("volumesell");
					this.OnvolumesellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="volquotes_valueatrisk", Storage="_valueatrisk", ThisKey="id", OtherKey="volquoteid")]
		public EntitySet<valueatrisk> valueatrisk
		{
			get
			{
				return this._valueatrisk;
			}
			set
			{
				this._valueatrisk.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stocks_volquotes", Storage="_stocks", ThisKey="stock", OtherKey="id", IsForeignKey=true)]
		public stocks stocks
		{
			get
			{
				return this._stocks.Entity;
			}
			set
			{
				stocks previousValue = this._stocks.Entity;
				if (((previousValue != value) 
							|| (this._stocks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._stocks.Entity = null;
						previousValue.volquotes.Remove(this);
					}
					this._stocks.Entity = value;
					if ((value != null))
					{
						value.volquotes.Add(this);
						this._stock = value.id;
					}
					else
					{
						this._stock = default(long);
					}
					this.SendPropertyChanged("stocks");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="timeframes_volquotes", Storage="_timeframes", ThisKey="timeframe", OtherKey="id", IsForeignKey=true)]
		public timeframes timeframes
		{
			get
			{
				return this._timeframes.Entity;
			}
			set
			{
				timeframes previousValue = this._timeframes.Entity;
				if (((previousValue != value) 
							|| (this._timeframes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._timeframes.Entity = null;
						previousValue.volquotes.Remove(this);
					}
					this._timeframes.Entity = value;
					if ((value != null))
					{
						value.volquotes.Add(this);
						this._timeframe = value.id;
					}
					else
					{
						this._timeframe = default(long);
					}
					this.SendPropertyChanged("timeframes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_valueatrisk(valueatrisk entity)
		{
			this.SendPropertyChanging();
			entity.volquotes = this;
		}
		
		private void detach_valueatrisk(valueatrisk entity)
		{
			this.SendPropertyChanging();
			entity.volquotes = null;
		}
	}
}
#pragma warning restore 1591
